{
    "crime": {
        "Crime": {
            "endpoint": "wg3w-h783",
            "queries": {
                "👮 Total Police Incidents": {
                    "summary": "Total count of all police incident reports filed. These reports are filed by officers or self-reported by members of the public using SFPD's online reporting system.",
                    "definition": "Includes all incident reports that have been reviewed and approved by a supervising Sergeant or Lieutenant. Data is updated daily by 10:00 Pacific.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= date_trunc_y(date_sub_y(current_date, 1)) AND Report_Datetime < current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Total Reports' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🚨 Violent Crime Incidents": {
                    "summary": "Count of reported violent crime incidents, including assaults, homicides, rapes, robberies, human trafficking, weapons offenses, and offenses against family/children.",
                    "definition": "Violent crimes are defined as incidents categorized as: Assault, Homicide, Rape, Robbery, Human Trafficking (Commercial Sex Acts and Involuntary Servitude), Offences Against The Family And Children, and Weapons Offenses.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= date_trunc_y(date_sub_y(current_date, 1)) AND Report_Datetime < current_date AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Violent Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🏠 Property Crime Incidents": {
                    "summary": "Count of reported property crime incidents, including arson, burglary, forgery and counterfeiting, fraud, larceny theft, motor vehicle theft, stolen property, vandalism, embezzlement, and recovered vehicle.",
                    "definition": "Property crimes are defined as incidents categorized as: Arson, Burglary, Forgery And Counterfeiting, Fraud, Larceny Theft, Motor Vehicle Theft, Stolen Property, Vandalism, Embezzlement, and Recovered Vehicle.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= date_trunc_y(date_sub_y(current_date, 1)) AND Report_Datetime < current_date AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Property Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "💊 Drug Crime Incidents": {
                    "summary": "Count of reported drug crime incidents, including drug offenses and drug violations.",
                    "definition": "Drug crimes are defined as incidents categorized as: Drug Offense and Drug Violation.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= date_trunc_y(date_sub_y(current_date, 1)) AND Report_Datetime < current_date AND Incident_Category IN ('Drug Offense', 'Drug Violation') GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Drug Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                }
            }
        }
    },
    "safety": {
        "fire": {
            "endpoint": "wr8u-xric",
            "queries": {
                "🚒 Fire Incidents YTD": "SELECT 'Total Fire Incidents' as label, max(incident_date) as max_date, COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district",
                
                "💔 Fire Fatalities YTD": "SELECT 'Total Fatalities' as label, max(incident_date) as max_date, SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) as this_year, SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END) as last_year, (SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) - SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END)) as delta, ((SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) - SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END)) * 100.0 / NULLIF(SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END), 0)) as perc_diff, supervisor_district group by supervisor_district"
            }
        },
        "emergency_response": {
            "endpoint": "2zdj-bwza",
            "queries": {
                "🚑 911 Response Time (mins) - Priority A": "SELECT 'Priority A Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'A' GROUP BY supervisor_district",
                
                "🚑 911 Response Time - Priority B": "SELECT 'Priority B Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'B' GROUP BY supervisor_district",
                
                "🚑 911 Response Time - Priority C": "SELECT 'Priority C Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'C' GROUP BY supervisor_district"
            }
        },
        "traffic_injuries": {
            "endpoint": "nwes-mmgh",
            "queries": {
                "🚗 Traffic Injuries YTD": "SELECT 'Total Traffic Injuries' as label, max(collision_date) as max_date, COUNT(CASE WHEN collision_date >= this_year_start AND collision_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN collision_date >= this_year_start AND collision_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN collision_date >= this_year_start AND collision_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
            }
        },
        "traffic_crashes": {
            "endpoint": "ubvf-ztfx",
            "queries": {
                "⚠️ Traffic Fatalities YTD": "SELECT 'Total Traffic Fatalities' as label, max(collision_date) as max_date, COUNT(CASE WHEN collision_date >= this_year_start AND collision_date <= this_year_end AND collision_severity = 'Fatal' THEN 1 END) as this_year, COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end AND collision_severity = 'Fatal' THEN 1 END) as last_year, (COUNT(CASE WHEN collision_date >= this_year_start AND collision_date <= this_year_end AND collision_severity = 'Fatal' THEN 1 END) - COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end AND collision_severity = 'Fatal' THEN 1 END)) as delta, ((COUNT(CASE WHEN collision_date >= this_year_start AND collision_date <= this_year_end AND collision_severity = 'Fatal' THEN 1 END) - COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end AND collision_severity = 'Fatal' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN collision_date >= last_year_start AND collision_date <= last_year_end AND collision_severity = 'Fatal' THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
            }
        }
    },
    "economy": {
        "business": {
            "endpoint": "g8m3-pdis",
            "queries": {
                "🏢 New Business Registrations": "SELECT 'New Business Registrations' as label, max(dba_start_date) as max_date, COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district",
                "🛍️ New Retail Registrations": "SELECT 'New Retail Registrations' as label, max(dba_start_date) as max_date, COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as this_year, COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as last_year, (COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district",
                "🚫 Business Closures": "SELECT 'Business Closures' as label, max(dba_end_date) as max_date, COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district",
                "🏪 Retail Closures": "SELECT 'Retail Closures' as label, max(dba_end_date) as max_date, COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as this_year, COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as last_year, (COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
            }
        }
    }
} 

