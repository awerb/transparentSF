{
    "crime": {
        "Crime": {
            "endpoint": "wg3w-h783",
            "queries": {
                "👮 Total Police Incidents": {
                    "summary": "Total count of all police incident reports filed by officers or self-reported by members of the public using SFPD's online reporting system.",
                    "definition": "Total count of all police incident reports filed by officers or self-reported by members of the public using SFPD's online reporting system.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Total Reports' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🚨 Violent Crime Incidents": {
                    "summary": "Count of reported violent crime incidents, including assaults, homicides, rapes, robberies, human trafficking, weapons offenses, and offenses against family/children.",
                    "definition": "Count of reported violent crime incidents. Violent crimes are defined as incidents categorized as: Assault, Homicide, Rape, Robbery, Human Trafficking (Commercial Sex Acts and Involuntary Servitude), Offences Against The Family And Children, and Weapons Offenses.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Violent Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🏠 Property Crime Incidents": {
                    "definition": "Property crimes are defined as incidents categorized as: Arson, Burglary, Forgery And Counterfeiting, Fraud, Larceny Theft, Motor Vehicle Theft, Stolen Property, Vandalism, Embezzlement, and Recovered Vehicle.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Property Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "💊 Drug Crime Incidents": {
                    "summary": "Count of reported drug crime incidents, including drug offenses and drug violations.",
                    "definition": "Drug crimes are defined as incidents categorized as: Drug Offense and Drug Violation.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783",
                    "ytd_query": "SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date AND Incident_Category IN ('Drug Offense', 'Drug Violation') GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Drug Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                }
            }
        },
        "jail": {
            "endpoint": "pfbp-75pz",
            "queries": {
                "🔒 Jail Bookings": {
                    "summary": "Total count of individuals booked into San Francisco City and County Jail.",
                    "definition": "Tracks the total number of jail bookings. Each booking represents when an individual is processed into jail custody after arrest. The booking process includes recording personal information, fingerprinting, and photographing. A single person may have multiple bookings.",
                    "data_sf_url": "https://data.sfgov.org/Public-Safety/Sheriff-Jail-Bookings-by-Age-Group/pfbp-75pz",
                    "ytd_query": "SELECT date_trunc_ymd(month_and_year_of_booking) as date, SUM(count_of_bookings) as value WHERE month_and_year_of_booking >= last_year_start AND month_and_year_of_booking < current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Total Bookings' as label, max(month_and_year_of_booking) as max_date, SUM(CASE WHEN month_and_year_of_booking >= this_year_start AND month_and_year_of_booking <= this_year_end THEN count_of_bookings END) as this_year, SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END) as last_year, (SUM(CASE WHEN month_and_year_of_booking >= this_year_start AND month_and_year_of_booking <= this_year_end THEN count_of_bookings END) - SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END)) as delta, ((SUM(CASE WHEN month_and_year_of_booking >= this_year_start AND month_and_year_of_booking <= this_year_end THEN count_of_bookings END) - SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END)) * 100.0 / NULLIF(SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END), 0)) as perc_diff"
                }
            }
        }
    },
    "safety": {
        "fire": {
            "endpoint": "wr8u-xric",
            "queries": {
                "🚒 Fire Incidents YTD": {
                    "summary": "Count of all non-medical incidents to which the SF Fire Department responded.",
                    "definition": "Fire Incidents includes a summary of each (non-medical) incident to which the SF Fire Department responded. Each incident record includes the call number, incident number, address, number and type of each unit responding, call type (as determined by dispatch), prime situation (field observation), actions taken, and property loss.",
                    "data_sf_url": "https://data.sfgov.org/resource/wr8u-xric.json",
                    "ytd_query": "SELECT date_trunc_ymd(incident_date) as date, COUNT(*) as value WHERE incident_date >= last_year_start AND incident_date <= current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Total Fire Incidents' as label, max(incident_date) as max_date, COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "💔 Fire Fatalities YTD": {
                    "summary": "Total count of fire-related fatalities, including both civilian and fire personnel fatalities.",
                    "definition": "Combines both fire fatalities (fire personnel) and civilian fatalities that occurred during fire incidents. Data is collected and reported by the SF Fire Department for each incident.",
                    "ytd_query": "SELECT date_trunc_ymd(incident_date) as date, sum(fire_fatalities + civilian_fatalities) as value WHERE incident_date >= last_year_start AND incident_date <= current_date GROUP BY date ORDER BY date",
                    "data_sf_url": "https://data.sfgov.org/resource/wr8u-xric.json",
                    "metric_query": "SELECT 'Total Fatalities' as label, max(incident_date) as max_date, SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) as this_year, SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END) as last_year, (SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) - SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END)) as delta, ((SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) - SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END)) * 100.0 / NULLIF(SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                }
            }
        },
        "emergency_response": {
            "endpoint": "2zdj-bwza",
            "queries": {
                "🚑 911 Response Time (mins) - Danger to life": {
                    "summary": "Average response time in minutes for Priority A emergency calls.",
                    "definition": "Measures the time between when a 911 call is received and when the first unit arrives on scene for Priority A (highest priority, danger to life) calls. Data comes from the Department of Emergency Management's Computer Aided Dispatch (CAD) System. Only includes calls where both received and onscene times are recorded and valid.",
                    "data_sf_url": "https://data.sfgov.org/resource/2zdj-bwza.json",
                    "ytd_query": "SELECT date_trunc_ymd(received_datetime) as date, AVG((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'A' GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Priority A Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'A' GROUP BY supervisor_district"
                },
                "🚑 911 Response Time (mins) - Danger to property ": {
                    "summary": "Average response time in minutes for Priority B emergency calls.",
                    "definition": "Measures the time between when a 911 call is received and when the first unit arrives on scene for Priority B (medium priority, danger to property) calls. Data comes from the Department of Emergency Management's Computer Aided Dispatch (CAD) System. Only includes calls where both received and onscene times are recorded and valid.",
                    "data_sf_url": "https://data.sfgov.org/resource/2zdj-bwza.json",
                    "ytd_query": "SELECT date_trunc_ymd(received_datetime) as date, AVG((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'B' GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Priority B Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'B' GROUP BY supervisor_district"
                },
                "🚑 911 Response Time (mins) - No danger to life or property": {
                    "summary": "Average response time in minutes for Priority C emergency calls.",
                    "definition": "Measures the time between when a 911 call is received and when the first unit arrives on scene for Priority C (lowest priority, no danger to life or property) calls. Data comes from the Department of Emergency Management's Computer Aided Dispatch (CAD) System. Only includes calls where both received and onscene times are recorded and valid.",
                    "data_sf_url": "https://data.sfgov.org/resource/2zdj-bwza.json",
                    "ytd_query": "SELECT date_trunc_ymd(received_datetime) as date, AVG((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'C' GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Priority C Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'C' GROUP BY supervisor_district"
                }
            }
        }
    },
    "economy": {
        "business": {
            "endpoint": "g8m3-pdis",
            "queries": {
                "🏢 New Business Registrations": {
                    "summary": "Count of new business registrations in San Francisco.",
                    "definition": "Tracks new business registrations through the Treasurer & Tax Collector's Office. Each registered business may have multiple locations. Data is collected through business registration applications and account updates.",
                    "data_sf_url": "https://data.sfgov.org/resource/g8m3-pdis.json",
                    "ytd_query": "SELECT date_trunc_ymd(dba_start_date) as date, COUNT(*) as value WHERE dba_start_date >= last_year_start AND dba_start_date <= current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'New Business Registrations' as label, max(dba_start_date) as max_date, COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🛍️ New Retail Registrations": {
                    "summary": "Count of new retail business registrations in San Francisco.",
                    "definition": "Tracks new retail business registrations through the Treasurer & Tax Collector's Office. Uses NAICS code to identify retail businesses. Each registered business may have multiple locations.",
                    "data_sf_url": "https://data.sfgov.org/resource/g8m3-pdis.json",
                    "ytd_query": "SELECT date_trunc_ymd(dba_start_date) as date, COUNT(*) as value WHERE dba_start_date >= last_year_start AND dba_start_date <= current_date AND naic_code_description = 'Retail Trade' GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'New Retail Registrations' as label, max(dba_start_date) as max_date, COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as this_year, COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as last_year, (COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🚫 Business Closures": {
                    "summary": "Count of business closures in San Francisco.",
                    "definition": "Tracks business closures through the Treasurer & Tax Collector's Office. Includes businesses that have formally closed or been administratively closed after 3 years of no filing or communication.",
                    "data_sf_url": "https://data.sfgov.org/resource/g8m3-pdis.json",
                    "ytd_query": "SELECT date_trunc_ymd(dba_end_date) as date, COUNT(*) as value WHERE dba_end_date >= last_year_start AND dba_end_date <= current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Business Closures' as label, max(dba_end_date) as max_date, COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                },
                "🏪 Retail Closures": {
                    "summary": "Count of retail business closures in San Francisco.",
                    "definition": "Tracks retail business closures through the Treasurer & Tax Collector's Office. Uses NAICS code to identify retail businesses. Includes businesses that have formally closed or been administratively closed after 3 years of no filing or communication.",
                    "data_sf_url": "https://data.sfgov.org/resource/g8m3-pdis.json",
                    "ytd_query": "SELECT date_trunc_ymd(dba_end_date) as date, COUNT(*) as value WHERE dba_end_date >= last_year_start AND dba_end_date <= current_date AND naic_code_description = 'Retail Trade' GROUP BY date ORDER BY date",
                    "metric_query": "SELECT 'Retail Closures' as label, max(dba_end_date) as max_date, COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as this_year, COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as last_year, (COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district"
                }
            }
        },
        "housing": {
            "endpoint": "j67f-aayr",
            "queries": {
                "🏠 New Housing Units Completed": {
                    "summary": "Count of net new housing units from completed building permits.",
                    "definition": "Tracks net new housing units that have been certified for occupancy through building permits. Each record represents when new units were approved for occupancy via Initial TCO, Amended TCO, or Certificate of Final Completion (CFC).",
                    "data_sf_url": "https://data.sfgov.org/Housing-and-Buildings/Dwelling-Unit-Completion-Counts-by-Building-Permit/j67f-aayr",
                    "ytd_query": "SELECT date_trunc_ym(date_issued) as date, SUM(number_of_units_certified) as value WHERE date_issued >= last_year_start AND date_issued <= current_date GROUP BY date ORDER BY date",
                    "metric_query": "SELECT '🏗️🏠 New Housing Units' as label, max(date_issued) as max_date, SUM(CASE WHEN date_issued >= this_year_start AND date_issued <= this_year_end THEN number_of_units_certified END) as this_year, SUM(CASE WHEN date_issued >= last_year_start AND date_issued <= last_year_end THEN number_of_units_certified END) as last_year, (SUM(CASE WHEN date_issued >= this_year_start AND date_issued <= this_year_end THEN number_of_units_certified END) - SUM(CASE WHEN date_issued >= last_year_start AND date_issued <= last_year_end THEN number_of_units_certified END)) as delta, ((SUM(CASE WHEN date_issued >= this_year_start AND date_issued <= this_year_end THEN number_of_units_certified END) - SUM(CASE WHEN date_issued >= last_year_start AND date_issued <= last_year_end THEN number_of_units_certified END)) * 100.0 / NULLIF(SUM(CASE WHEN date_issued >= last_year_start AND date_issued <= last_year_end THEN number_of_units_certified END), 0)) as perc_diff"
                }
            }
        }
    }
} 

